" vim config file "

" make vim more useful!
set nocompatible

"
" plugin configs
"

" lightline config
let g:lightline = {
\   'active': {
\     'left': [
\       ['mode', 'paste', 'spell'],
\       ['readonly', 'filename', 'modified'],
\       ['tags']
\     ],
\   },
\   'component': {
\     'paste': '%{&paste ? "¶" : ""}',
\     'spell': '%{&spell ? "⚐ " . &spelllang : ""}',
\     'tags': '%{gutentags#statusline("♺ ")}',
\   },
\ }

" buftabline config
let g:buftabline_show = 1
let g:buftabline_numbers = 2
let g:buftabline_indicators = 1

" gutentags config
let g:gutentags_cache_dir = '~/.cache/vim/ctags'
augroup gutentags_statusline
  autocmd!
  autocmd User GutentagsUpdating call lightline#update()
  autocmd User GutentagsUpdated call lightline#update()
augroup END

" lsp/supertab/asyncomplete config
let g:asyncomplete_auto_popup = 0
let g:SuperTabClosePreviewOnPopupClose = 1
let g:SuperTabDefaultCompletionType = 'context'
let g:lsp_document_code_action_signs_enabled = 0
autocmd FileType *
  \ if &omnifunc ==# '' |
  \ setlocal omnifunc=syntaxcomplete#Complete |
  \ endif
augroup lsp_install
  autocmd!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" nerdcommenter config
let g:NERDSpaceDelims = 1

" nerdtree config
"" Exit vim if nerdtree is the only window left.
autocmd BufEnter *
  \ if tabpagenr('$') == 1 && winnr('$') == 1
  \ && exists('b:NERDTree') && b:NERDTree.isTabTree() |
  \ quit | endif
"" Prevent other buffers from replacing nerdtree.
autocmd BufEnter *
  \ if bufname('#') =~ 'NERD_tree_\d\+'
  \ && bufname('%') !~ 'NERD_tree_\d\+'
  \ && winnr('$') > 1 |
  \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf |
  \ endif

"
" load built-in plugins
"

packadd! matchit
packadd! termdebug

"
" plugins
"

call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'ap/vim-buftabline'
Plug 'junegunn/fzf.vim'
Plug 'preservim/nerdcommenter'
Plug 'preservim/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'preservim/tagbar', {'on': 'TagbarToggle'}
Plug 'ludovicchabant/vim-gutentags'
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-surround'
Plug 'cespare/vim-toml'
Plug 'ap/vim-css-color'
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'ervandew/supertab'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
call plug#end()

"
" settings
"

" vim behavior
set autoread            " refresh when file is changed outside
set hidden              " hide buffers instead of closing
set laststatus=2        " always show status line
set mouse=a             " start with mouse enabled
set noshowmode          " hide mode line for insert/visual/replace
set number              " show line numbering
set scrolloff=5         " keep lines above and below cursor
set showcmd             " show partial command and selection counts
set spelllang=en_us     " set spelling language to English
set title               " change terminal title

" searching
set hlsearch            " highlight search terms
set incsearch           " show search matches as you type
set ignorecase          " case insensitive search
set smartcase           " case sensitive when uppercase present

" tab settings
set autoindent expandtab
set tabstop=2 softtabstop=2 shiftwidth=2
augroup init_tabs | autocmd!
  autocmd FileType c,rust,python setlocal ts=4
augroup END

"
" colors
"

" vim 256 colors
if $TERM == 'xterm-256color' || $TERM == 'screen-256color' || $TERM == 'alacritty'
  set t_Co=256
endif

set background=dark

" layout
hi LineNr           cterm=bold ctermfg=244 ctermbg=235
hi VertSplit        cterm=bold ctermfg=246 ctermbg=246

" tab line
hi TabLineSel cterm=none
hi BufTabLineFill    cterm=none ctermfg=246 ctermbg=246
hi BufTabLineCurrent cterm=bold ctermfg=236 ctermbg=14
hi BufTabLineActive  cterm=none ctermfg=250 ctermbg=236
hi BufTabLineHidden  cterm=none ctermfg=250 ctermbg=240

" completion menu
hi Pmenu            ctermfg=250 ctermbg=238
hi PmenuSel         ctermfg=255 ctermbg=25
hi PmenuSbar        ctermbg=234
hi PmenuThumb       ctermfg=250

"
" key bindings
"

" key mapping leader
let mapleader = '\'

" window navigation
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" buffer navigation
nnoremap <c-n> :bnext<cr>
nnoremap <c-p> :bprevious<cr>
nnoremap <c-x> :bprevious<bar>bdelete #<cr>
nmap <leader>1 <plug>BufTabLine.Go(1)
nmap <leader>2 <plug>BufTabLine.Go(2)
nmap <leader>3 <plug>BufTabLine.Go(3)
nmap <leader>4 <plug>BufTabLine.Go(4)
nmap <leader>5 <plug>BufTabLine.Go(5)
nmap <leader>6 <plug>BufTabLine.Go(6)
nmap <leader>7 <plug>BufTabLine.Go(7)
nmap <leader>8 <plug>BufTabLine.Go(8)
nmap <leader>9 <plug>BufTabLine.Go(9)
nmap <leader>0 <plug>BufTabLine.Go(10)

" key mappings
nnoremap j gj
nnoremap k gk
nnoremap <c-f> :FZF<cr>
nnoremap <c-s> :Tags<cr>
nnoremap <c-b> :Buffers<cr>
nnoremap <c-c> :cclose<cr>:lclose<cr>
"" insert mappings
inoremap <c-u> <esc>viw~ea
"" visual mappings
vnoremap // y/<c-r>"<cr>

" leader mappings
nnoremap <leader>a ggvG$
nnoremap <leader>q :quit<cr>
nnoremap <leader>w :write<cr>
nnoremap <leader>c :nohlsearch<cr>
nnoremap <leader>e :edit <c-r>=expand('%:p:h')<cr>/
nnoremap <leader>s :split<space>
nnoremap <leader>v :vsplit<space>
nnoremap <leader>f :Rg<cr>

" fn mappings
nnoremap <F5> :edit<cr>
nnoremap <F6> :call ToggleMouse()<cr>
nnoremap <F7> :set paste!<cr>
nnoremap <F8> :set spell!<cr>
nnoremap <F9> :NERDTreeToggle<cr>
nnoremap <F10> :call ToggleLocationList()<cr>
nnoremap <F11> :call ToggleQuickFixList()<cr>
nnoremap <F12> :TagbarToggle<cr>

"
" functions
"

function! ToggleMouse()
  if &mouse ==# ''
    set mouse=a
    echomsg 'mouse on'
  else
    set mouse=
    echomsg 'mouse off'
  endif
endfunction

function! ToggleLocationList()
  if empty(filter(getwininfo(), 'v:val.loclist'))
    lopen
  else
    lclose
  endif
endfunction

function! ToggleQuickFixList()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  if exists('+tagfunc')
    setlocal tagfunc=lsp#tagfunc
  endif

  nmap <leader>gg <plug>(lsp-document-diagnostics)
  nmap <leader>gd <plug>(lsp-definition)
  nmap <leader>gi <plug>(lsp-implementation)
  nmap <leader>gt <plug>(lsp-type-definition)
  nmap <leader>ga <plug>(lsp-code-action)
  nmap <leader>gr <plug>(lsp-references)

  nmap <leader>rd <plug>(lsp-peek-definition)
  nmap <leader>ri <plug>(lsp-peek-implementation)
  nmap <leader>rt <plug>(lsp-peek-type-definition)
  nmap <leader>rh <plug>(lsp-hover)
  nmap <leader>rn <plug>(lsp-rename)

  inoremap <buffer> <expr><c-u> lsp#scroll(-4)
  inoremap <buffer> <expr><c-d> lsp#scroll(+4)
endfunction
