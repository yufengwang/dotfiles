" vim config file "

" make vim more useful!
set nocompatible

"
" plugin configs
"

" lightline config
let g:lightline = {
\   'mode_map': {'n': 'N', 'i': 'I', 'v': 'V', 'R': 'R'},
\   'active': {
\     'left': [
\       ['mode', 'paste', 'spell'],
\       ['readonly', 'filename', 'modified']
\     ],
\   },
\   'component': {
\     'paste': '%{&paste ? "¶" : ""}',
\     'spell': '%{&spell ? "⚐ " . &spelllang : ""}',
\   },
\   'component_function': {
\     'fileencoding': 'LightlineFileencoding',
\     'fileformat': 'LightlineFileformat',
\   },
\ }

function! LightlineFileencoding()
  let l:enc = &fenc !=# '' ? &fenc : &enc
  return l:enc ==# 'utf-8' ? '' : l:enc
endfunction

function! LightlineFileformat()
  return &ff ==# 'unix' ? '' : &ff
endfunction

" buftabline config
let g:buftabline_show = 1
let g:buftabline_numbers = 2
let g:buftabline_indicators = 1

" supertab config
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabClosePreviewOnPopupClose = 1

" gutentags config
let g:gutentags_cache_dir = '~/.cache/gutentags'
let g:gutentags_exclude_filetypes = ['text']

" vimux config
let g:VimuxHeight = '40'
let g:VimuxUseNearest = 0
let g:VimuxOrientation = 'h'
let g:VimuxPromptString = 'vimux$ '

" vim-racer config
let g:racer_experimental_completer = 1
augroup racer_disable_preview
  autocmd!
  autocmd filetype rust setlocal completeopt-=preview
augroup END

" tagbar config
let g:rust_use_custom_ctags_defs = 1
let g:tagbar_type_rust = {
  \ 'ctagsbin': 'ctags',
  \ 'ctagstype': 'rust',
  \ 'kinds' : [
      \ 'n:modules',
      \ 's:structures:1',
      \ 'i:interfaces',
      \ 'c:implementations',
      \ 'f:functions:1',
      \ 'g:enumerations:1',
      \ 't:type aliases:1:0',
      \ 'v:constants:1:0',
      \ 'M:macros:1',
      \ 'm:fields:1:0',
      \ 'e:enum variants:1:0',
      \ 'P:methods:1',
  \ ],
  \ 'sro': '::',
  \ 'kind2scope' : {
      \ 'n': 'module',
      \ 's': 'struct',
      \ 'i': 'interface',
      \ 'c': 'implementation',
      \ 'f': 'function',
      \ 'g': 'enum',
      \ 't': 'typedef',
      \ 'v': 'variable',
      \ 'M': 'macro',
      \ 'm': 'field',
      \ 'e': 'enumerator',
      \ 'P': 'method',
  \ },
\ }

"
" load built-in plugins
"

packadd! matchit

"
" plugins
"

call plug#begin('~/.vim/plugged')
Plug 'itchyny/lightline.vim'
Plug 'ap/vim-buftabline'
Plug 'ervandew/supertab'
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar', {'on': 'TagbarToggle'}
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'ludovicchabant/vim-gutentags'
Plug 'editorconfig/editorconfig-vim'
Plug 'tpope/vim-surround'
Plug 'benmills/vimux'
Plug 'racer-rust/vim-racer', {'for': 'rust'}
Plug 'rust-lang/rust.vim', {'for': 'rust'}
Plug 'cespare/vim-toml'
Plug 'jrozner/vim-antlr'
Plug 'ap/vim-css-color'
call plug#end()

"
" settings
"

" vim behavior
set autoread            " refresh when file is changed outside
set hidden              " hide buffers instead of closing
set laststatus=2        " always show status line
set mouse=a             " start with mouse enabled
set noshowmode          " hide mode line for insert/visual/replace
set number              " show line numbering
set scrolloff=5         " keep lines above and below cursor
set spelllang=en_us     " set spelling language to English
set title               " change terminal title

" searching
set hlsearch            " highlight search terms
set incsearch           " show search matches as you type
set ignorecase          " case insensitive search
set smartcase           " case sensitive when uppercase present

" tab settings
set autoindent expandtab
set tabstop=4 softtabstop=4 shiftwidth=4
augroup filetype_tabs
  autocmd!
  autocmd filetype html,css,scss    setlocal ts=2 sts=2 sw=2
  autocmd filetype javascript,json  setlocal ts=2 sts=2 sw=2
  autocmd filetype ruby,liquid      setlocal ts=2 sts=2 sw=2
  autocmd filetype toml,xml,yaml    setlocal ts=2 sts=2 sw=2
  autocmd filetype sh,tmux,vim,zsh  setlocal ts=2 sts=2 sw=2
augroup END

"
" colors
"

" vim 256 colors
if $TERM == 'xterm-256color' || $TERM == 'screen-256color'
  set t_Co=256
endif

set background=dark

" layout
hi LineNr           cterm=bold ctermfg=244 ctermbg=235
hi VertSplit        cterm=bold ctermfg=246 ctermbg=246

" tab line
hi TabLineSel cterm=none
hi BufTabLineFill    cterm=none ctermfg=246 ctermbg=246
hi BufTabLineCurrent cterm=none ctermfg=240 ctermbg=250
hi BufTabLineActive  cterm=none ctermfg=250 ctermbg=236
hi BufTabLineHidden  cterm=none ctermfg=250 ctermbg=240

" completion menu
hi Pmenu            ctermfg=250 ctermbg=238
hi PmenuSel         ctermfg=255 ctermbg=25
hi PmenuSbar        ctermbg=234
hi PmenuThumb       ctermfg=250

"
" key bindings
"

" key mapping leader
let mapleader = '\'

" window navigation
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
nnoremap <leader>sh :split<space>
nnoremap <leader>sv :vsplit<space>

" buffer navigation
nnoremap <c-n> :bnext<cr>
nnoremap <c-p> :bprevious<cr>
nnoremap <c-x> :bprevious \| bdelete #<cr>
nmap <leader>1 <plug>BufTabLine.Go(1)
nmap <leader>2 <plug>BufTabLine.Go(2)
nmap <leader>3 <plug>BufTabLine.Go(3)
nmap <leader>4 <plug>BufTabLine.Go(4)
nmap <leader>5 <plug>BufTabLine.Go(5)
nmap <leader>6 <plug>BufTabLine.Go(6)
nmap <leader>7 <plug>BufTabLine.Go(7)
nmap <leader>8 <plug>BufTabLine.Go(8)
nmap <leader>9 <plug>BufTabLine.Go(9)
nmap <leader>0 <plug>BufTabLine.Go(10)

" key mappings
nnoremap j gj
nnoremap k gk
nnoremap <c-f> :FZF<cr>
nnoremap <c-b> :Buffers<cr>
nnoremap <c-m> :Tags<cr>
inoremap <c-u> <esc>viw~ea
vnoremap // y/<c-r>"<cr>
vnoremap ch I#<esc>
vnoremap c/ I//<esc>

" leader mappings
nnoremap <leader>a ggvG$
nnoremap <leader>q :quit<cr>
nnoremap <leader>w :write<cr>
nnoremap <leader>e :edit <c-r>=expand('%:p:h')<cr>/
nnoremap <leader>hc :nohlsearch<cr>

" rust lookup mappings
nmap <leader>rd <plug>(rust-doc)
nmap <leader>rf <plug>(rust-def)
nmap <leader>rs <plug>(rust-def-split)
nmap <leader>rv <plug>(rust-def-vertical)

" vimux mappings
nnoremap <leader>xv :VimuxPromptCommand<cr>
nnoremap <leader>xl :VimuxRunLastCommand<cr>
nnoremap <leader>xk :VimuxInterruptRunner<cr>
nnoremap <leader>xi :VimuxInspectRunner<cr>
nnoremap <leader>xz :VimuxZoomRunner<cr>
nnoremap <leader>xc :VimuxClearRunnerHistory<cr>
nnoremap <leader>xq :VimuxCloseRunner<cr>

" vim hot-reload
nnoremap <leader>ve :edit $MYVIMRC<cr>
nnoremap <leader>vs :source $MYVIMRC<cr>

" fn mappings
nnoremap <F5> :edit<cr>
nnoremap <F6> :call MouseToggle()<cr>
nnoremap <F7> :NERDTreeToggle<cr>
nnoremap <F8> :TagbarToggle<cr>
nnoremap <F9> :lopen<cr>
nnoremap <F10> :lclose<cr>
nnoremap <F11> :set paste!<cr>
nnoremap <F12> :set spell!<cr>

"
" functions
"

function! MouseToggle()
  if &mouse ==# ''
    set mouse=a
    echomsg 'mouse on'
  else
    set mouse=
    echomsg 'mouse off'
  endif
endfunction
