#!/usr/bin/env bash
#
# A simple dotfiles manager.

set -e -o pipefail

NAME="dotfilez"
HOME="$(echo ~)"
ROOT_DIR="$HOME/.dotfiles"
BIN_DIR="$ROOT_DIR/bin"
DOT_DIR="$ROOT_DIR/dot"
CFG_DIR="$ROOT_DIR/cfg"

print_usage() {
  echo "Usage: $NAME <command>"
  echo "Try '$NAME help' for more info"
}

print_help() {
  echo "$NAME - A simple CLI for dotfile management"
  echo "Usage: $NAME <command>"
  echo ""
  echo "Commands:"
  echo "    install    -  symlink dotfiles and install plugins"
  echo "    uninstall  -  unlink dotfiles"
  echo "    update     -  update submodules and plugins"
  echo "    help       -  display this help"
}

link_dotfiles() {
  cd "$DOT_DIR"
  echo "> symlinking dotfiles to $HOME"

  for match in ./*; do
    # grab only the filename
    local file="${match:2}"
    local src_file="$DOT_DIR/$file"
    local dest_file="$HOME/.$file"

    if [[ -L "$dest_file" ]]; then
      rm -rf "$dest_file"
      ln -s "$src_file" "$dest_file"
      echo "~/.$file: symlink replaced"
    elif [[ -e "$dest_file" ]]; then
      mv "$dest_file" "$dest_file.bkup"
      ln -s "$src_file" "$dest_file"
      echo "~/.$file: backed up to ~/.$file.bkup"
    else
      ln -s "$src_file" "$dest_file"
      echo "~/.$file: symlinked"
    fi
  done

  cd "$CFG_DIR"
  echo "> symlinking configs to $HOME/.config"

  for match in ./*; do
    local file="${match:2}"
    local src_file="$CFG_DIR/$file"
    local dest_file="$HOME/.config/$file"

    if [[ -L "$dest_file" ]]; then
      rm -rf "$dest_file"
      ln -sT "$src_file" "$dest_file"
      echo "~/.config/$file: symlink replaced"
    elif [[ -e "$dest_file" ]]; then
      mv "$dest_file" "$dest_file.bkup"
      ln -sT "$src_file" "$dest_file"
      echo "~/.config/$file: backed up to ~/.config/$file.bkup"
    else
      ln -sT "$src_file" "$dest_file"
      echo "~/.config/$file: symlinked"
    fi
  done
}

unlink_dotfiles() {
  cd "$DOT_DIR"
  echo "> unlinking dotfiles from $HOME"

  for match in ./*; do
    # grab only the filename
    local file="${match:2}"
    local dest_file="$HOME/.$file"

    if [[ -e "$dest_file" ]] && [[ -L "$dest_file" ]]; then
      rm -rf "$dest_file"
      echo "~/.$file: unlinked"
    fi
  done

  cd "$CFG_DIR"
  echo "> unlinking configs from $HOME/.config"

  for match in ./*; do
    local file="${match:2}"
    local dest_file="$HOME/.config/$file"

    if [[ -e "$dest_file" ]] && [[ -L "$dest_file" ]]; then
      rm -rf "$dest_file"
      echo "~/.config/$file: unlinked"
    fi
  done
}

setup_submodules() {
  cd "$ROOT_DIR"
  echo "> setting up submodules"
  git submodule init
  git submodule update
}

update_submodules() {
  cd "$ROOT_DIR"
  echo "> updating submodules"
  git submodule update --init
}

install_vim_plugins() {
  echo "> installing (neo)vim plugins"
  for editor in vim nvim; do
    $editor +PlugInstall
  done
}

update_vim_plugins() {
  echo "> updating (neo)vim plugins"
  for editor in vim nvim; do
    $editor +PlugUpgrade
    $editor +PlugUpdate
    $editor +PlugClean
  done
}

download_vim_plug() {
  local plug_url='https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  curl -sfLo ~/.vim/autoload/plug.vim --create-dirs "$plug_url"
  curl -sfLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs "$plug_url"
}

run_install() {
  setup_submodules
  link_dotfiles
  download_vim_plug
  install_vim_plugins
  printf '> install complete. please reboot your shell.\n'
}

run_uninstall() {
  unlink_dotfiles
  printf '> uninstall complete. please reboot your shell.\n'
}

run_update() {
  update_submodules
  update_vim_plugins
  printf '> update complete.\n'
}

main() {
  case "$1" in
    install)
      run_install
      ;;
    uninstall)
      run_uninstall
      ;;
    update)
      run_update
      ;;
    help)
      print_help
      ;;
    '')
      print_usage
      exit 1
      ;;
    *)
      echo "Unrecognized command. Try: '$NAME help'"
      exit 1
  esac
  exit 0
}

main "$@"
